import type { Ora } from 'ora';
import type { Type } from './typings';
export declare class Logger {
    protected _text: string | null;
    protected _textStyles: Type.Styles;
    protected _detail: string | null;
    protected _detailStyles: Type.Styles;
    protected _prefix: string | null;
    protected _prefixStyles: Type.Styles;
    protected _data: any;
    protected _displayTime: boolean;
    protected _loggerType: 'normal' | 'stream';
    private _prependDivider;
    private _prependDividerStyles;
    private _prependDividerLength;
    private _prependDividerChar;
    private _appendDivider;
    private _appendDividerStyles;
    private _appendDividerChar;
    private _appendDividerLength;
    private _singleDivider;
    private _singleDividerStyles;
    private _singleDividerChar;
    private _singleDividerLength;
    private _isVisible;
    constructor(prefixStyles?: Type.Styles);
    static stylesMap: Record<Type.Type | string, Type.Styles>;
    static getLoggerInstance(type: Type.Type, styles?: Type.Styles): Logger;
    static type(type: Type.Type, styles?: Type.Styles): Logger;
    static get stream(): StreamLogger;
    toStream(prefix?: string, prefixStyles?: Type.Styles): StreamLogger;
    static get plain(): Logger;
    static get info(): Logger;
    static get warn(): Logger;
    static get error(): Logger;
    static get debug(): Logger;
    static get success(): Logger;
    static get failure(): Logger;
    private setDividerProperties;
    divider(char?: string, length?: number, styles?: Type.Styles): void;
    styles(styles: Type.Styles): this;
    prependDivider(char?: string, length?: number, styles?: Type.Styles): this;
    appendDivider(char?: string, length?: number, styles?: Type.Styles): this;
    time(isDisplay?: boolean): this;
    get formattedTime(): string;
    text(text: string, styles?: Type.Styles): this;
    get formattedText(): string;
    detail(detail: string, styles?: Type.Styles): this;
    get formattedDetail(): string;
    prefix(prefix: string, styles?: Type.Styles): this;
    get formattedPrefix(): string;
    data(data: any): this;
    get formattedData(): string;
    protected decorateText(content: string, styles?: Type.Styles): string;
    protected composeMainOutput(): string;
    print(isVisible?: boolean): void;
    private printBrowserOutput;
    protected capitalize(text: string): string;
    get [Symbol.toStringTag](): string;
    toString(): string;
    toObject(): this;
}
export declare class StreamLogger extends Logger {
    protected _state: 'start' | 'stop' | 'succeed' | 'fail' | undefined;
    protected _spinner: Ora | undefined;
    protected _delay: number;
    _prefix: string | null;
    _prefixStyles: Type.Styles;
    _text: string | null;
    _detail: string | null;
    _textStyles: Type.Styles;
    _detailStyles: Type.Styles;
    _loggerType: 'normal' | 'stream';
    constructor(prefix?: string, prefixStyles?: Type.Styles);
    prefix(prefix: string, styles?: Type.Styles): this;
    text(text?: string, styles?: Type.Styles): this;
    detail(detail?: string, styles?: Type.Styles): this;
    delay(delay: number): this;
    state(state: 'start' | 'stop' | 'succeed' | 'fail'): this;
    update(): void;
    asyncUpdate(delay?: number): Promise<void>;
    private updateState;
}
